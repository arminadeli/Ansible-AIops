- name: remove blue deployment
  hosts: all
  tasks:
   - name: Dynatrace identified the problem
     uri:
       url: "{{ dtcommentapiurl }}"
       method: POST
       headers:
         Content-Type: "application/json"
         Authorization: "Api-Token {{ dttoken }}"
       status_code: 201
       body_format: json
       body:
         message: "Evaluating the issue."
         context: "Ansible Tower"
     when: state  == "OPEN"

  # - name: fetch deployment events (if any)
  #     uri:
  #       url: "{{dtdeploymentapiurl}}"
  #       return_content: yes
  #     with_items: "{{ impactedEntities }}"
  #     when: state == "OPEN"
  #     register: customproperties
  #     ignore_errors: no
  
  #   - name: parse deployment events
  #      when: state == "OPEN"
  #       set_fact:
  #         deployment_events: "{{item.json.events}}"
  #       with_items: "{{ customproperties.results }}"
  #       register: deployment_events

  #   - name: get most recent deployment
  #     when: state == "OPEN"
  #     set_fact:
  #       myItem: "{{ deployment_events | first }}"

   - name: delete blue pod
     shell:
      "kubectl delete deployment deployment-blue && kubectl delete svc deployment-blue"
     when: state  == "OPEN"

   - name: delete ingress
     shell:
      "kubectl delete ing deployment-canary-blue"
     when: state  == "OPEN"

   - name: update ingress to route all traffic to green
     shell:
      "kubectl apply -f /home/ubuntu/k8s/canary-release/ingress-canary-green.yaml"
     when: state  == "OPEN"

  #  - name: "update deployment information"
  #     uri:
  #       url: "{{dtdeploymentapiurl}}"
  #       body_format: json
  #       method: POST
  #       body: '{ 
  #          "eventType": "CUSTOM_DEPLOYMENT", 
  #          "attachRules": 
  #            { 
  #            "tagRule" : 
  #               [{ 
  #                  "meTypes" : ["SERVICE"], 
  #                  "tags" : 
  #                  [ 
  #                     { 
  #                        "context" : "CONTEXTLESS", 
  #                        "key" : "My_service" 
  #                     } 
  #                  ]
  #               }] },
  #               "deploymentName":"Rolling back the 1.0 build",
  #               "deploymentVersion":"latest",
  #               "remediationAction":"revert-changes.yaml",
  #               "source":"Ansible",
  #               "customProperties":
  #               {
  #                 "CI Tool": "Ansible Tower",
  #                 "Current docker version (tag value) ": "1.0",
  #                 "Upgrading to docker version (tag value)": "latest" 
  #               }
  #            }'
  #     when: state == "OPEN"  

   - name: faulty deployment has been deleted
     uri:
       url: "{{ dtcommentapiurl }}"
       method: POST
       headers:
         Content-Type: "application/json"
         Authorization: "Api-Token {{ dttoken }}"
       status_code: 201
       body_format: json
       body:
         message: " {{ tags[0] }} deployment has been deleted"
         context: "Ansible Tower"
     when: state  == "OPEN"

   - name: Blue deployment has been deleted
     uri:
       url: "{{ dtcommentapiurl }}"
       method: POST
       headers:
         Content-Type: "application/json"
         Authorization: "Api-Token {{ dttoken }}"
       status_code: 201
       body_format: json
       body:
         message: "Blue deployment has been deleted"
         context: "Ansible Tower"
     when: state  == "OPEN"
